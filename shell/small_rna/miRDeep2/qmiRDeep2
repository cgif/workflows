#!/bin/bash

#
# generates, configures and submits scripts to run mirExpress on
# a set of fastq files in a CGI project directory
#

#CONFIGURATION
##############

#now
NOW="date +%Y-%m-%d%t%T%t"

#today
TODAY=`date +%Y-%m-%d`


#returns absolute path to qfastqc directory, not changing your current directory
BASEDIR="$( cd "$( dirname "$0" )" && pwd )"

QUEUE=pqcgi
GROUP_VOL_CGI=/groupvol/cgi
PROJECT_TGU=/project/tgu
DEPLOYMENT_SERVER=eliot.med.ic.ac.uk
DEPLOYMENT_BASE_DIR=/www/html/report


REFERENCE=/project/tgu/resources/reference/index/miRDeep2/eukaryote/hsapiens/GRCh37/fasta/GRCh37_no_spaces.fa
INDEXED_PATH=/project/tgu/resources/reference/index/miRDeep2/eukaryote/hsapiens/GRCh37/bowtie
ADAPTER=TGGAATTCTCGGGTGCCAAGG
MIRBASE_DIR=/groupvol/cgi/resources/small_rna/miRBase/miRBase_21
SPECIES=human


USAGE="USAGE: qmiRDeep2 -i <input_path> \n
\t\t -p <project> \n
\t\t -a <adapter, default TGGAATTCTCGGGTGCCAAGG > \n
\t\t -m <mirBase directory, default /groupvol/cgi/resources/small_rna/miRBase/miRBase_21> \n
\t\t -r <reference fasta, default /project/tgu/resources/reference/index/miRDeep2/eukaryote/hsapiens/GRCh37/fasta/GRCh37_no_spaces.fa> \n
\t\t -b <path to bowtie indexed reference, default /project/tgu/resources/reference/index/miRDeep2/eukaryote/hsapiens/GRCh37/bowtie>"

#COMMAND LINE ARGS
##################

while getopts "i:a:m:p:r:b:h" option; do
    case "$option" in

	i) INPUT_PATH="$OPTARG";;
	a) ADAPTER="$OPTARG";;
	m) MIRBASE_DIR="$OPTARG";;
	p) PROJECT="$OPTARG";;
	r) REFERENCE="$OPTARG";;
	b) INDEXED_PATH="$OPTARG";;
	h) echo -e $USAGE; exit 1;;
	[?]) echo -e $USAGE; exit 1;;

    esac
done

#check if required arguments are missing
if	[[ -z $INPUT_PATH ]] || \
	[[ -z $PROJECT ]]
then
    echo -e $USAGE
    exit 1
fi


#FUNCTIONS
##########

#creates job scripts
function submitJob {

	path_reads_dir=$1
	output_dir=$2
	adapter=$3
	mirbase_dir=$4
	path_script_dir=$5
	species=$6
	reference=$7
	indexed_path=$8
	today=$9
	deployment_server=${10}
	deployment_path=${11}
	job_id_list=${12}
    
	sample=`basename $path_reads_dir`

	echo "`$NOW`creating and submitting job scripts for miRDeep2 run for sample $sample"
	#create miRDeep2 script from template
	
	#for each fastq file 
	for fastq_read in `ls --color=never $path_reads_dir/*.f*q*`
	do
 
        fastq_read_name=`basename $fastq_read`

  		script_path=$path_script_dir/mD.$sample.$fastq_read_name.sh
  		cp $BASEDIR/miRDeep2.sh $script_path
  		chmod 770 $script_path
	
		#configure mirExpress script
		sed -i -e "s/#inputFastq/${fastq_read//\//\\/}/" $script_path
		sed -i -e "s/#reference/${reference//\//\\/}/" $script_path
		sed -i -e "s/#indexedPath/${indexed_path//\//\\/}/" $script_path
		sed -i -e "s/#outputDir/${output_dir//\//\\/}/" $script_path
		sed -i -e "s/#deploymentServer/$deployment_server/" $script_path
		sed -i -e "s/#deploymentPath/${deployment_path//\//\\/}/" $script_path
		sed -i -e "s/#sample/$sample/" $script_path
		sed -i -e "s/#mirbaseDir/${mirbase_dir//\//\\/}/" $script_path
		sed -i -e "s/#adapter/${adapter//\//\\/}/" $script_path
		sed -i -e "s/#species/$species/" $script_path
		sed -i -e "s/#today/$today/" $script_path


  		#submit job 
  		log_output_path=`echo $script_path | perl -pe 's/\.sh/\.log/g'`
  		job_id=`qsub -q $QUEUE -o $log_output_path $script_path`
		echo "`$NOW`$sample Read $fastq_read"
		echo "`$NOW`Job ID:$job_id"
		echo -e "$job_id" >> $job_id_list

	done	
}


#RUN
####

echo "`$NOW`setting up miRDeep2 runs"

if [ -d $INPUT_PATH ]; then
    
    #create and set permissions for runs project parent directory
    mkdir -p $PROJECT_TGU/runs/$PROJECT/miRDeep2/$TODAY
    chmod -R 770 $PROJECT_TGU/runs/$PROJECT/miRDeep2

    PROJECT_RUNS_DIR=$PROJECT_TGU/runs/$PROJECT/miRDeep2/$TODAY

    #create and set permissions for results project parent directory
    mkdir -p $PROJECT_TGU/results/$PROJECT/miRDeep2/$TODAY
    chmod -R 770 $PROJECT_TGU/results/$PROJECT/miRDeep2
    PROJECT_RESULT_DIR=$PROJECT_TGU/results/$PROJECT/miRDeep2/$TODAY

    #create and set permissions for multisample analysis directory
    mkdir -p $PROJECT_TGU/runs/$PROJECT/miRDeep2/$TODAY/multisample
    chmod 770 $PROJECT_TGU/runs/$PROJECT/miRDeep2/$TODAY/multisample

    mkdir -p $PROJECT_TGU/runs/$PROJECT/miRDeep2/$TODAY/multisample/run
    chmod 770 $PROJECT_TGU/runs/$PROJECT/miRDeep2/$TODAY/multisample/run
    MS_ANALYSIS_DIR=$PROJECT_TGU/runs/$PROJECT/miRDeep2/$TODAY/multisample

    #create and set permissions for multisample results directory
    mkdir -p $PROJECT_TGU/results/$PROJECT/miRDeep2/$TODAY/multisample
    chmod 770 $PROJECT_TGU/results/$PROJECT/miRDeep2/$TODAY/multisample
    MS_RESULT_DIR=$PROJECT_TGU/results/$PROJECT/miRDeep2/$TODAY/multisample

    JOB_ID_LIST=$MS_ANALYSIS_DIR/job_id_list.txt
    echo -n "" > $JOB_ID_LIST
    chmod 660 $JOB_ID_LIST

    #create summary directory on deployment server
    SUMMARY_DEPLOYMENT=$DEPLOYMENT_BASE_DIR/project/$PROJECT/miRDeep2/$TODAY
    ssh $DEPLOYMENT_SERVER "mkdir -p -m 775 $SUMMARY_DEPLOYMENT" > /dev/null 2>&1
	ssh $DEPLOYMENT_SERVER "chmod -R 775 $DEPLOYMENT_BASE_DIR/project/$PROJECT" > /dev/null 2>&1

    #for each sample directory...
    for SAMPLE in `ls --color=never $INPUT_PATH`
    do

	FASTQ_DIR=$INPUT_PATH/$SAMPLE

	if [ -d $FASTQ_DIR ]; then

		#count fastq files in directory		
		FASTQ_COUNT=`ls --color=never $FASTQ_DIR/*.f*q* | wc -l`

		if [ $FASTQ_COUNT -gt 0 ]; then

			echo "`$NOW`processing directory $SAMPLE..."

        	#...create output directory
			mkdir -p $PROJECT_RESULT_DIR/$SAMPLE
			chmod 770 $PROJECT_RESULT_DIR/$SAMPLE
			OUT_RESULTS=$PROJECT_RESULT_DIR/$SAMPLE
			mkdir -m 770 $PROJECT_RESULT_DIR/$SAMPLE/mapper
			mkdir -m 770 $PROJECT_RESULT_DIR/$SAMPLE/quantifier

			mkdir -p $PROJECT_RUNS_DIR/$SAMPLE
			chmod 770 $PROJECT_RUNS_DIR/$SAMPLE

			mkdir -p $PROJECT_RUNS_DIR/$SAMPLE/run
			chmod 770 $PROJECT_RUNS_DIR/$SAMPLE/run
			OUT_SCRIPTS=$PROJECT_RUNS_DIR/$SAMPLE/run

			echo "`$NOW`input directory: $FASTQ_DIR"
			echo "`$NOW`results directory: $OUT_RESULTS" 
			echo "`$NOW`script and log output directory: $OUT_SCRIPTS"

			DEPLOYMENT_PATH=$DEPLOYMENT_BASE_DIR/project/$PROJECT/miRDeep2/$TODAY/$SAMPLE

		
			#create, configure and submit job scripts

			submitJob $FASTQ_DIR $OUT_RESULTS $ADAPTER $MIRBASE_DIR $OUT_SCRIPTS $SPECIES $REFERENCE $INDEXED_PATH $TODAY $DEPLOYMENT_SERVER $DEPLOYMENT_PATH $JOB_ID_LIST
    
		else

			echo "`$NOW`directory $SAMPLE does not contain any fastq files (.fq or .fastq file extension)"
	
		fi
	fi

    done


    echo "`$NOW`creating and submitting job script for summary of results"
    #create summary script from template
    SUMMARY_PATH=$MS_ANALYSIS_DIR/run/mD.summary.$PROJECT.pl
    cp $BASEDIR/summary_miRDeep2.pl $SUMMARY_PATH
    chmod 770 $SUMMARY_PATH

    #configure summary script, it will be executed from fastqc script
    sed -i -e "s/#pathReadsFastq/${INPUT_PATH//\//\\/}/" $SUMMARY_PATH
    sed -i -e "s/#pathAnalysisDir/${PROJECT_RUNS_DIR//\//\\/}/" $SUMMARY_PATH
    sed -i -e "s/#pathReportsDir/${PROJECT_RESULT_DIR//\//\\/}/" $SUMMARY_PATH
    sed -i -e "s/#pathMSReportsDir/${MS_RESULT_DIR//\//\\/}/" $SUMMARY_PATH
    sed -i -e "s/#deploymentServer/$DEPLOYMENT_SERVER/" $SUMMARY_PATH
    sed -i -e "s/#summaryDeployment/${SUMMARY_DEPLOYMENT//\//\\/}/" $SUMMARY_PATH

    #summary is on hold until miRDeep2 runs are completed 
    #collect miRDeep2 job ids for dependency variable
    SUMMARY_JOB_DEPENDENCY="afterany"
    for JOB_ID in `grep 'cx1' $JOB_ID_LIST`
    do

        JOB_ID=`basename $JOB_ID .cx1b`
	SUMMARY_JOB_DEPENDENCY="$SUMMARY_JOB_DEPENDENCY:$JOB_ID"

	done

    #submit job 
    LOG_OUTPUT_PATH=`echo $SUMMARY_PATH | perl -pe 's/\.pl/\.log/g'`
    JOB_ID=`qsub -q $QUEUE -W depend=$SUMMARY_JOB_DEPENDENCY -o $LOG_OUTPUT_PATH -j oe $SUMMARY_PATH`
    echo "`$NOW`Job ID:$JOB_ID"

else

    echo "`$NOW`Error: Input path is not a directory."
    exit 1

fi

