#!/bin/bash

#
# sets up directory structure and configures scripts
# for bismark mapping and methylation run and submits jobs to pqcgi queue
# set up for small bismark runs, where all data is in one fastq and run without splitting
#

#CONFIGURATION
##############

#now
NOW="date +%Y-%m-%d%t%T%t"

#today
TODAY=`date +%Y-%m-%d`

#returns absolute path to qfastqc directory, not changing your current directory
BASEDIR="$( cd "$( dirname "$0" )" && pwd )"

PROJECT_TGU=/project/tgu
DEPLOYMENT_SERVER=eliot.med.ic.ac.uk
DEPLOYMENT_BASE_DIR=/www/html/report

QUEUE=pqcgi
WALLTIME_HOURS_PER_RUN=4

#trhreads per run
THREADS_PER_RUN=8

USAGE="$BASEDIR/qbismark.usage"

ANALYSIS_NAME=bismark

BISMARK_VERSION=0.16.1
SAMTOOLS_VERSION=1.2
BOWTIE_VERSION=2.2.6

REFERENCE_DIR=/project/tgu/resources/reference/hsapiens/GRCh37/bismark/fasta

PATTERN_READ1='_R1_'
PATTERN_READ2='_R2_'


#COMMAND LINE ARGS
##################
while getopts "i:r:t:p:n:d:h" option; do
    case "$option" in
	
	i) INPUT_PATH="$OPTARG";;
	r) PATH_REFERENCE_FASTA="$OPTARG";;
	t) PATTERN_READ1="$OPTARG";;
	p) PATTERN_READ2="$OPTARG";;
	n) PROJECT="$OPTARG";;
	d) ID_FILE="$OPTARG";;
	h) cat $USAGE; exit 0;;
	[?]) cat $USAGE; exit 1;;

esac
done

if [ -z $INPUT_PATH ] || \
    [ -z $REFERENCE_DIR ] || \
    [ -z $PATTERN_READ1 ] || \
    [ -z $PATTERN_READ2 ] || \
    [ -z $ID_FILE ] || \
    [ -z $PROJECT ]
    then
    cat $USAGE
    exit 1
fi


#FUNCTIONS
##########

#creates job scripts
function submitJobs {

        local path_reads_directory=$1
	local reference_dir=$2
	local path_run_dir=$3
	local path_results_dir=$4
	local pattern_read1=$5
	local pattern_read2=$6
	local sample=$7
	local cust_id=$8
	local walltime_hours_per_run=$9
	local threads_per_run=${10}
	local summary_script_path=${11}

	local path_scripts_dir=$path_run_dir/run      
	local setup_log=$path_scripts_dir/setup.log
#	local job_id_list=$path_scripts_dir/job_id.list
#	echo -n "" > $job_id_list
#	chmod 660 $job_id_list

	for fastq_read1 in `ls --color=never $path_reads_directory/*.f*q* | grep $pattern_read1`
	do

#	skip md5 files
		local re='md5'
		[[ $fastq_read1 =~ $re ]] && continue

	        local fastq_read1=`basename $fastq_read1`
    		local fastq_read2=`echo $fastq_read1 | perl -pe "s/$pattern_read1/$pattern_read2/"`

#                #right filter the shortest match (chop end extension)
#		local path_reference_fasta_no_ext=${path_reference_fasta%.*}
#		local reference_fasta_name=`basename $path_reference_fasta_no_ext`

                #right filter the longest match (chop end extension)
#		local read_group_name=${fastq_read1%%.*}
     
	        #output prefix
#		local output_prefix=$read_group_name.vs.$reference_fasta_name

		echo "`$NOW`setting up $ANALYSIS_NAME run..."

		echo "`$NOW`setting up $ANALYSIS_NAME run" >> $setup_log
		echo "`$NOW`read directory: $path_reads_directory" >> $setup_log
		echo "`$NOW`fastq file 1: $fastq_read1" >> $setup_log
		echo "`$NOW`fastq file 2: $fastq_read1" >> $setup_log
		echo "`$NOW`reference: $reference_dir" >> $setup_log
		echo "`$NOW`script directory: $path_scripts_dir" >> $setup_log
		echo "`$NOW`result directory: $path_results_dir" >> $setup_log
		echo "`$NOW`creating and submitting job scripts:" >> $setup_log

		local script_path=$path_scripts_dir/BS${sample}.sh
		cp $BASEDIR/bismark.sh $script_path
		chmod 770 $script_path

	        #set variables 
		sed -i -e "s/#bismarkVersion/$BISMARK_VERSION/" $script_path
		sed -i -e "s/#bowtieVersion/$BOWTIE_VERSION/" $script_path
		sed -i -e "s/#samtoolsVersion/$SAMTOOLS_VERSION/" $script_path
		sed -i -e "s/#walltimeHours/$walltime_hours_per_run/" $script_path
		sed -i -e "s/#customerID/$cust_id/" $script_path
		sed -i -e "s/#sampleName/$sample/" $script_path
		sed -i -e "s/#threads/$threads_per_run/" $script_path
		sed -i -e "s/#pathOutputDir/${path_results_dir//\//\\/}/" $script_path
		sed -i -e "s/#referenceDir/${reference_dir//\//\\/}/" $script_path
		sed -i -e "s/#pathReadsDirectory/${path_reads_directory//\//\\/}/" $script_path
		sed -i -e "s/#read1/$fastq_read1/" $script_path
		sed -i -e "s/#read2/$fastq_read2/" $script_path

	        #submit job and save job ID to dependency variable 
		local log_output_path=`echo $script_path | perl -pe 's/\.sh/\.log/g'`
		echo "`$NOW`$script_path" >> $setup_log
		echo -n "`$NOW`" >> $setup_log
		local job_id=`qsub -q $QUEUE -o $log_output_path $script_path`
		echo $job_id >> $setup_log
#		echo -e "$job_id" >> $job_id_list
		echo "#############################################################################" >> $setup_log

	done

#        #summary is on hold until tophat runs for the sample are completed 
#        #collect tophat job ids for dependency variable
	SUMMARY_JOB_DEPENDENCY="afterany"
#	for JOB_ID in `grep 'cx1' $job_id_list`
#	do

#                JOB_ID=`basename $JOB_ID .cx1b`
#	        SUMMARY_JOB_DEPENDENCY="$SUMMARY_JOB_DEPENDENCY:$JOB_ID"

#	done

	echo "`$NOW`submitting summary script:" >> $setup_log
	echo "`$NOW`$summary_script_path" >> $setup_log
	echo "`$NOW`with dependency $job_id" >> $setup_log
	echo -n "`$NOW`" >> $setup_log
	local summary_log=$path_scripts_dir/summary.log
	local sum_job_id=`qsub -q $QUEUE -o $summary_log -j oe -W depend=$SUMMARY_JOB_DEPENDENCY:$job_id -M igf@imperial.ac.uk $summary_script_path`
	echo $sum_job_id >> $setup_log
	echo "`$NOW`for details look at $setup_log"
       
}

function get_customerID {

	local id_file=$1
	local igf_id=$2

	declare -A id_assoc
	while read -a id_array 
		do id_assoc["${id_array[0]}"]="${id_array[1]}"
	done < $id_file

	echo "${id_assoc[${igf_id}]}"
}


if [ -d $INPUT_PATH ]
then

        #create and set permissions for analysis project parent directory
        mkdir -p $PROJECT_TGU/runs/$PROJECT
	chmod 770 $PROJECT_TGU/runs/$PROJECT

	mkdir -p $PROJECT_TGU/runs/$PROJECT/$ANALYSIS_NAME
	chmod 770 $PROJECT_TGU/runs/$PROJECT/$ANALYSIS_NAME

	mkdir -p $PROJECT_TGU/runs/$PROJECT/$ANALYSIS_NAME/$TODAY
	chmod 770 $PROJECT_TGU/runs/$PROJECT/$ANALYSIS_NAME/$TODAY

	mkdir -p $PROJECT_TGU/runs/$PROJECT/$ANALYSIS_NAME/$TODAY/multisample
	chmod 770 $PROJECT_TGU/runs/$PROJECT/$ANALYSIS_NAME/$TODAY/multisample

	mkdir -p $PROJECT_TGU/runs/$PROJECT/$ANALYSIS_NAME/$TODAY/multisample/run
	chmod 770 $PROJECT_TGU/runs/$PROJECT/$ANALYSIS_NAME/$TODAY/multisample/run

	PATH_MS_ANALYSIS_PATH=$PROJECT_TGU/runs/$PROJECT/$ANALYSIS_NAME/$TODAY/multisample

        #create and set permissions for results project parent directory
	mkdir -p $PROJECT_TGU/results/$PROJECT
	chmod 770 $PROJECT_TGU/results/$PROJECT

	mkdir -p $PROJECT_TGU/results/$PROJECT/$ANALYSIS_NAME
	chmod 770 $PROJECT_TGU/results/$PROJECT/$ANALYSIS_NAME

	mkdir -p $PROJECT_TGU/results/$PROJECT/$ANALYSIS_NAME/$TODAY
	chmod 770 $PROJECT_TGU/results/$PROJECT/$ANALYSIS_NAME/$TODAY

	mkdir -p $PROJECT_TGU/results/$PROJECT/$ANALYSIS_NAME/$TODAY/multisample
	chmod 770 $PROJECT_TGU/results/$PROJECT/$ANALYSIS_NAME/$TODAY/multisample

	PATH_MS_RESULTS_PATH=$PROJECT_TGU/results/$PROJECT/$ANALYSIS_NAME/$TODAY/multisample

        #create and set permissions for summary
	SUMMARY_RESULTS=$PATH_MS_RESULTS_PATH
	SUMMARY_DEPLOYMENT=$DEPLOYMENT_BASE_DIR/project/$PROJECT/$ANALYSIS_NAME/$TODAY
	ssh $DEPLOYMENT_SERVER "mkdir -p $SUMMARY_DEPLOYMENT" > /dev/null 2>&1
	ssh $DEPLOYMENT_SERVER "chmod 0775 $DEPLOYMENT_BASE_DIR/project/$PROJECT/$ANALYSIS_NAME" > /dev/null 2>&1
	ssh $DEPLOYMENT_SERVER "chmod 0775 $DEPLOYMENT_BASE_DIR/project/$PROJECT" > /dev/null 2>&1
	scp -r ${BASEDIR}/../../resources/images/tick.png $DEPLOYMENT_SERVER:$SUMMARY_DEPLOYMENT/ > /dev/null 2>&1
	scp -r ${BASEDIR}/../../resources/images/error.png $DEPLOYMENT_SERVER:$SUMMARY_DEPLOYMENT/ > /dev/null 2>&1
	scp -r ${BASEDIR}/../../resources/images/warning.png $DEPLOYMENT_SERVER:$SUMMARY_DEPLOYMENT/ > /dev/null 2>&1
	ssh $DEPLOYMENT_SERVER "chmod -R 664 $SUMMARY_DEPLOYMENT/*png" > /dev/null 2>&1

        #create summary script and set variables
	SUMMARY_SCRIPT=$PATH_MS_ANALYSIS_PATH/run/summary_bismark.pl
	cp $BASEDIR/summary_bismark.pl $SUMMARY_SCRIPT
	chmod 770 $SUMMARY_SCRIPT

        #set variables in summary script
	sed -i -e "s/#projectDirAnalysis/${PATH_MS_ANALYSIS_PATH//\//\\/}/" $SUMMARY_SCRIPT
	sed -i -e "s/#projectDirResults/${PATH_MS_RESULTS_PATH//\//\\/}/" $SUMMARY_SCRIPT
	sed -i -e "s/#deploymentServer/$DEPLOYMENT_SERVER/" $SUMMARY_SCRIPT
	sed -i -e "s/#summaryDeployment/${SUMMARY_DEPLOYMENT//\//\\/}/" $SUMMARY_SCRIPT
	sed -i -e "s/#summaryResults/${SUMMARY_RESULTS//\//\\/}/" $SUMMARY_SCRIPT

        #for each sample directory...
	for SAMPLE in `ls --color=never $INPUT_PATH|grep -v 'multisample\|SampleSheet.csv'`
	do

	        echo "#############################################################################"
		echo "`$NOW`processing sample $SAMPLE..."
		echo "#############################################################################"

		FASTQ_DIR=$INPUT_PATH/$SAMPLE
       
		if [ -d $FASTQ_DIR ]
		then

	                #count fastq files in directory		
		        FASTQ_COUNT=`ls --color=never $FASTQ_DIR/*.f*q* | wc -l`

			if [ $FASTQ_COUNT -gt 0 ]
			then

		                #create and set permissions for analysis sample parent directory
			        mkdir -p $PROJECT_TGU/runs/$PROJECT/$ANALYSIS_NAME/$TODAY/$SAMPLE
				chmod 770 $PROJECT_TGU/runs/$PROJECT/$ANALYSIS_NAME/$TODAY/$SAMPLE

				mkdir -p $PROJECT_TGU/runs/$PROJECT/$ANALYSIS_NAME/$TODAY/$SAMPLE/run
				chmod 770 $PROJECT_TGU/runs/$PROJECT/$ANALYSIS_NAME/$TODAY/$SAMPLE/run

 		                #create and set permissions for results sample parent directory
   				mkdir -p $PROJECT_TGU/results/$PROJECT/$ANALYSIS_NAME/$TODAY/$SAMPLE
    				chmod 770 $PROJECT_TGU/results/$PROJECT/$ANALYSIS_NAME/$TODAY/$SAMPLE

        	                #define output directory
				PATH_RUN_DIR=$PROJECT_TGU/runs/$PROJECT/$ANALYSIS_NAME/$TODAY/$SAMPLE
				PATH_OUT_DIR=$PROJECT_TGU/results/$PROJECT/$ANALYSIS_NAME/$TODAY/$SAMPLE   

   				SETUP_LOG=$PATH_RUN_DIR/run/setup.log
				echo -n "" > $SETUP_LOG

				CUST_ID=$(get_customerID $ID_FILE $SAMPLE)
	
		                #create, configure and submit job scripts
				submitJobs $FASTQ_DIR \
			                   $REFERENCE_DIR \
			                   $PATH_RUN_DIR \
			                   $PATH_OUT_DIR \
			                   $PATTERN_READ1 \
			                   $PATTERN_READ2 \
					   $SAMPLE \
					   $CUST_ID \
			                   $WALLTIME_HOURS_PER_RUN \
					   $THREADS_PER_RUN \
					   $SUMMARY_SCRIPT

			else

			        echo "`$NOW`Error: directory $SAMPLE does not contain any fastq files (.fq or .fastq file extension)"	

			fi
       
		else 

		        echo "`$NOW`Error: directory $SAMPLE is not a directory."

		fi

	done
	
else

        echo "`$NOW`Error: Input path is not a directory."
	exit 1

fi

echo "#############################################################################"
echo "`$NOW`progress and summary of bismark runs can be monitored at $DEPLOYMENT_SERVER/report/project/$PROJECT"
