#!/bin/bash

# sets up directory structure and generates, configures and submits
# scripts to run BreakDancer algorithm for detecting genomic structural variations

#CONFIGURATION
##############

#now
NOW="date +%Y-%m-%d%t%T%t"

#today
TODAY=`date +%Y-%m-%d`

USAGE="USAGE: qbd -s <sample_list> -n <project_name>"
DEPLOYMENT_SERVER=eliot.med.ic.ac.uk
DEPLOYMENT_BASE_DIR=/www/html/report

BASEDIR="$( cd "$( dirname "$0" )" && pwd )"
GROUP_VOL_CGI=/groupvol/cgi

SAMTOOLS_VERSION=0.1.19
BEDTOOLS_VERSION=2.13.3
BD_VERSION=1.2
module load samtools/$SAMTOOLS_VERSION

GENES_BED=/groupvol/cgi/resources/annotations/eukaryote/human/GRCh37/GRCh37.74.gene.bed

#COMMAND LINE ARGS
##################

while getopts "s:n:h" option; do
    	case "$option" in
	
		n) PROJECT="$OPTARG";;
		s) SAMPLE_LIST="$OPTARG";;
	        b) GENES_BED="$OPTARG";;
		h) echo "$USAGE";;
		[?]) echo "$USAGE";;

	esac
done

if [[ -z $SAMPLE_LIST ]] || [[ -z $PROJECT ]]; then

    	echo $USAGE
    	exit 1

fi

#check if input directory exists
if [[ ! -d $GROUP_VOL_CGI/results/$PROJECT/mutect ]]; then

        echo "`$NOW`ERROR: input directory does not exist: $GROUP_VOL_CGI/results/$PROJECT/mutect"
        exit 1

fi

#check if sample list file exists
if [[ ! -e $SAMPLE_LIST ]]; then

        echo "`$NOW`ERROR: sample list file does not exist: $SAMPLE_LIST"
        exit 1

fi


#########################################################
#create and set permissions for project parent directory# 
#########################################################  

ANALYSIS_DIR_PROJECT=$GROUP_VOL_CGI/analysis/$PROJECT/breakDancer
RESULTS_DIR_PROJECT=$GROUP_VOL_CGI/results/$PROJECT/breakDancer
 
mkdir -p $ANALYSIS_DIR_PROJECT
chmod 0770 $ANALYSIS_DIR_PROJECT
    
mkdir -p $RESULTS_DIR_PROJECT
chmod 0770 $RESULTS_DIR_PROJECT

mkdir -p $ANALYSIS_DIR_PROJECT/$TODAY
chmod 0770 $ANALYSIS_DIR_PROJECT/$TODAY
    
mkdir -p $RESULTS_DIR_PROJECT/$TODAY
chmod 0770 $RESULTS_DIR_PROJECT/$TODAY

MS_ANALYSIS_DIR=$ANALYSIS_DIR_PROJECT/$TODAY/multisample
mkdir -p $MS_ANALYSIS_DIR
chmod 0770 $MS_ANALYSIS_DIR

mkdir -p $MS_ANALYSIS_DIR/run
chmod 0770 $MS_ANALYSIS_DIR/run

MS_RESULTS_DIR=$RESULTS_DIR_PROJECT/$TODAY/multisample
mkdir -p $MS_RESULTS_DIR
chmod 0770 $MS_RESULTS_DIR

#create deployment directory for summary
SUMMARY_DEPLOYMENT=$DEPLOYMENT_BASE_DIR/project/$PROJECT/breakDancer/$TODAY
ssh $DEPLOYMENT_SERVER "mkdir -p -m 775 $SUMMARY_DEPLOYMENT" > /dev/null 2>&1

echo -n "" > $MS_ANALYSIS_DIR/merge_dependency.tsv   

#for each sample (make sure that each sample and date is unique) run MuTect
sort $SAMPLE_LIST | uniq | while read SAMPLE_NORMAL SAMPLE_TUMOR DATE SEX; do

        if [[ "$SAMPLE_NORMAL" != "" ]] && [[ "$SAMPLE_TUMOR" != "" ]]; then

		echo "`$NOW`"
		echo "`$NOW`"
		echo "`$NOW`running BreakDancer for samples $SAMPLE_NORMAL & $SAMPLE_TUMOR"

                SAMPLE_PAIR=$SAMPLE_NORMAL.vs.$SAMPLE_TUMOR

	        #create output directories
		ANALYSIS_DIR_SAMPLE=$ANALYSIS_DIR_PROJECT/$TODAY/$SAMPLE_PAIR
		mkdir -p $ANALYSIS_DIR_SAMPLE
		chmod 0770 $ANALYSIS_DIR_SAMPLE

		mkdir -p $ANALYSIS_DIR_SAMPLE/run
		chmod 0770 $ANALYSIS_DIR_SAMPLE/run

		RESULTS_DIR_SAMPLE=$RESULTS_DIR_PROJECT/$TODAY/$SAMPLE_PAIR
		mkdir -p $RESULTS_DIR_SAMPLE
		chmod 0770 $RESULTS_DIR_SAMPLE

		NORMAL_BAM=$GROUP_VOL_CGI/results/$PROJECT/mutect/$DATE/$SAMPLE_NORMAL/recalibration/$SAMPLE_NORMAL.bam
		TUMOR_BAM=$GROUP_VOL_CGI/results/$PROJECT/mutect/$DATE/$SAMPLE_TUMOR/recalibration/$SAMPLE_TUMOR.bam

		for BAM_FILE in $NORMAL_BAM $TUMOR_BAM; do

		    SAMPLE_NAME=`basename $BAM_FILE .bam`

		    BAM_SIZE=`du $BAM_FILE | cut -f1`
		    BAM_SIZE_MB=$(( $BAM_SIZE / 1024 ))
		    BAM_SIZE_GB=$(( $BAM_SIZE_MB / 1024 ))
		    TMPSPACE_GB=$(( $BAM_SIZE_GB * 2 ))

		    #run breakDancer job for translocations
		    SCRIPT_PATH=$ANALYSIS_DIR_SAMPLE/run/BD_${SAMPLE_NAME}_translocations.sh
		    cp $BASEDIR/bd.sh $SCRIPT_PATH
		    chmod 0770 $SCRIPT_PATH	

        	    #set variables 
         	    sed -i -e "s/#tmpSpace/${TMPSPACE_GB}/" $SCRIPT_PATH
 		    sed -i -e "s/#samtoolsVersion/${SAMTOOLS_VERSION}/" $SCRIPT_PATH
 		    sed -i -e "s/#bdVersion/${BD_VERSION}/" $SCRIPT_PATH

        	    sed -i -e "s/#inputBam/${BAM_FILE//\//\\/}/" $SCRIPT_PATH
        	    sed -i -e "s/#resultsFolder/${RESULTS_DIR_SAMPLE//\//\\/}/" $SCRIPT_PATH

		    echo "`$NOW`$SCRIPT_PATH"
        	    LOG_PATH=`echo $SCRIPT_PATH | perl -pe 's/\.sh/\.log/g'`
        	    JOB_ID=`qsub -q pqcgi -o $LOG_PATH $SCRIPT_PATH`
        	    echo "`$NOW`JOB_ID: $JOB_ID"
		    echo -e "$JOB_ID" >> $MS_ANALYSIS_DIR/merge_dependency.tsv 

		done
	                   	      		
	fi

done

echo "`$NOW`"
echo "`$NOW`"
echo "`$NOW`select somatic translocations that came up in multiple patients"

MERGE_DEPENDENCY=afterok
for JOB_ID in `cut -f 1 $MS_ANALYSIS_DIR/merge_dependency.tsv`; do
        MERGE_DEPENDENCY="$MERGE_DEPENDENCY:$JOB_ID"
done

SCRIPT_PATH=$MS_ANALYSIS_DIR/run/PP_${PROJECT}.pl
cp $BASEDIR/filter_mult.pl $SCRIPT_PATH
chmod 0770 $SCRIPT_PATH

#set variables 
BD_DIR=$RESULTS_DIR_PROJECT/$TODAY
sed -i -e "s/#bedtoolsVersion/${BEDTOOLS_VERSION}/" $SCRIPT_PATH
sed -i -e "s/#bdDir/${BD_DIR//\//\\/}/" $SCRIPT_PATH
sed -i -e "s/#genesBed/${GENES_BED//\//\\/}/" $SCRIPT_PATH
sed -i -e "s/#project/${PROJECT//\//\\/}/" $SCRIPT_PATH
sed -i -e "s/#deploymentServer/${DEPLOYMENT_SERVER//\//\\/}/" $SCRIPT_PATH
sed -i -e "s/#summaryDeployment/${SUMMARY_DEPLOYMENT//\//\\/}/" $SCRIPT_PATH

echo "`$NOW`$SCRIPT_PATH"
LOG_PATH=`echo $SCRIPT_PATH | perl -pe 's/\.pl/\.log/g'`
JOB_ID=`qsub -l walltime=24:00:00 -l mem=10gb -M igf@imperial.ac.uk -m ea -j oe -q pqcgi -W depend=$MERGE_DEPENDENCY -o $LOG_PATH $SCRIPT_PATH`
echo "`$NOW`JOB_ID: $JOB_ID"

