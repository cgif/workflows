#!/bin/bash

# sets up directory structure and scripts to run 
# SomaticIndelDetectorOncotator annotation and submits jobs to queue

BASEDIR="$( cd "$( dirname "$0" )" && pwd )"

#now
NOW="date +%Y-%m-%d%t%T%t"

#today
TODAY=`date +%Y-%m-%d`

#get the directory this script resides in
GROUP_VOL_CGI=/groupvol/cgi
QUEUE=pqcgi

#path to text file containing usage information
USAGE="$BASEDIR/oncotator.usage"
DEPLOYMENT_SERVER=eliot.med.ic.ac.uk
DEPLOYMENT_BASE_DIR=/www/html/report

ONCOTATOR_VERSION=1.5.1.0
PYTHON_VERSION=2.7.3
SAMTOOLS_VERSION=0.1.18
TABIX_VERSION=0.2.6
GATK_VERSION=3.2-2
JAVA_VERSION=jdk-7u25
R_VERSION=3.1.2

REFERENCE_FASTA=$GROUP_VOL_CGI/resources/reference/eukaryote/human/hs37d5/hs37d5.fa
ONCOTATOR_DB=/project/tgu/resources/oncotator/oncotator_v1_ds_Jan262014
TRANSCRIPT_LIST=/project/tgu/resources/oncotator/tx_exact_uniprot_matches.AKT1_CRLF2_FGFR1.txt

#parse command line args
while getopts "n:s:h" OPTION; do

    case "$OPTION" in
	n) PROJECT="$OPTARG";;
	s) SAMPLE_LIST="$OPTARG";;
	h) cat $USAGE; exit 0;;
	[?]) cat $USAGE; exit 1;;
    esac

done

#check if all required arguments are present...
if [[ -z $PROJECT ]] || [[ -z $SAMPLE_LIST ]] ; then
        cat $USAGE
        exit 1
fi 

#check if sample list file exists
if [[ ! -e $SAMPLE_LIST ]]; then
        echo "`$NOW`ERROR: sample list file does not exist: $SAMPLE_LIST"
        exit 1
fi

#create and set permissions for project parent directory   

ANALYSIS_DIR_PROJECT=$GROUP_VOL_CGI/analysis/$PROJECT/oncotator
RESULTS_DIR_PROJECT=$GROUP_VOL_CGI/results/$PROJECT/oncotator
 
mkdir -p $GROUP_VOL_CGI/analysis/$PROJECT/oncotator
chmod 770 $GROUP_VOL_CGI/analysis/$PROJECT/oncotator

mkdir -p $GROUP_VOL_CGI/results/$PROJECT/oncotator
chmod 770 $GROUP_VOL_CGI/results/$PROJECT/oncotator

mkdir -p $GROUP_VOL_CGI/analysis/$PROJECT/oncotator/$TODAY
chmod 770 $GROUP_VOL_CGI/analysis/$PROJECT/oncotator/$TODAY
    
mkdir -p $GROUP_VOL_CGI/results/$PROJECT/oncotator/$TODAY
chmod 770 $GROUP_VOL_CGI/results/$PROJECT/oncotator/$TODAY

mkdir -p $GROUP_VOL_CGI/analysis/$PROJECT/oncotator/$TODAY/run
chmod 770 $GROUP_VOL_CGI/analysis/$PROJECT/oncotator/$TODAY/run

ANALYSIS_DIR=$GROUP_VOL_CGI/analysis/$PROJECT/oncotator/$TODAY
RESULTS_DIR=$GROUP_VOL_CGI/results/$PROJECT/oncotator/$TODAY

echo -n "" > $ANALYSIS_DIR/run/merge_dependency.tsv

#for each sample run Oncotator
sort $SAMPLE_LIST | uniq | while read SAMPLE_NORMAL SAMPLE_TUMOR MUTECT_DATE SID_DATE; do

	SAMPLE_NAME=$SAMPLE_NORMAL.vs.$SAMPLE_TUMOR
	VCF_FILE_MUTECT=$GROUP_VOL_CGI/results/$PROJECT/mutect/$MUTECT_DATE/$SAMPLE_NAME/$SAMPLE_NAME.vcf
	VCF_FILE_SID=$GROUP_VOL_CGI/results/$PROJECT/SomaticIndelDetector/$SID_DATE/$SAMPLE_NAME/$SAMPLE_NAME.vcf
	
        if [[ "$SAMPLE_NAME" != "" ]] && [[ -e "$VCF_FILE_MUTECT" ]] && [[ -e "$VCF_FILE_SID" ]]; then

		echo "`$NOW`"
		echo "`$NOW`merging Mutect and SomaticIndelDetector VCF files for $SAMPLE_NAME"

		SCRIPT_PATH=$ANALYSIS_DIR/run/MV_${SAMPLE_NAME}.sh
		cp $BASEDIR/merge_vcf.sh $SCRIPT_PATH
		chmod 770 $SCRIPT_PATH
 
		sed -i -e "s/#javaVersion/$JAVA_VERSION/" $SCRIPT_PATH
		sed -i -e "s/#gatkVersion/$GATK_VERSION/" $SCRIPT_PATH
		sed -i -e "s/#oncotatorVersion/$ONCOTATOR_VERSION/" $SCRIPT_PATH
		sed -i -e "s/#pythonVersion/$PYTHON_VERSION/" $SCRIPT_PATH
		sed -i -e "s/#samtoolsVersion/$SAMTOOLS_VERSION/" $SCRIPT_PATH
		sed -i -e "s/#tabixVersion/$TABIX_VERSION/" $SCRIPT_PATH
		sed -i -e "s/#rVersion/$R_VERSION/" $SCRIPT_PATH

		sed -i -e "s/#referenceFasta/${REFERENCE_FASTA//\//\\/}/" $SCRIPT_PATH
		sed -i -e "s/#pathVCFmutect/${VCF_FILE_MUTECT//\//\\/}/" $SCRIPT_PATH
		sed -i -e "s/#pathVCFsid/${VCF_FILE_SID//\//\\/}/" $SCRIPT_PATH
		sed -i -e "s/#analysisDir/${ANALYSIS_DIR//\//\\/}/" $SCRIPT_PATH
		sed -i -e "s/#oncotatorDB/${ONCOTATOR_DB//\//\\/}/" $SCRIPT_PATH
		sed -i -e "s/#transcriptList/${TRANSCRIPT_LIST//\//\\/}/" $SCRIPT_PATH

		LOG_PATH=`echo $SCRIPT_PATH | perl -pe 's/\.sh/\.log/g'`
		echo "`$NOW`$SCRIPT_PATH"

		JOB_ID=`qsub -o $LOG_PATH $SCRIPT_PATH` 
		echo "`$NOW`job ID: $JOB_ID"

		echo -e "$JOB_ID\t$ANALYSIS_DIR/$SAMPLE_NAME.vcf" >> $ANALYSIS_DIR/run/merge_dependency.tsv

	else

	        echo "`$NOW`No Mutect or SomaticIndelDetector VCF file found for $SAMPLE_NAME"

	fi

done

echo "`$NOW`"		
echo "`$NOW`mergeing VCF files across all samples and running Oncotator on the merged VCF file"

MERGE_DEPENDENCY=afterok
for JOB_ID in `cut -f 1 $ANALYSIS_DIR/run/merge_dependency.tsv`; do
        MERGE_DEPENDENCY="$MERGE_DEPENDENCY:$JOB_ID"
done

MULTISAMPLE_VCF=""
for VCF_FILE in `cut -f 2 $ANALYSIS_DIR/run/merge_dependency.tsv`; do
        MULTISAMPLE_VCF="$MULTISAMPLE_VCF $VCF_FILE"
done

SCRIPT_PATH=$ANALYSIS_DIR/run/OT_$PROJECT.sh
cp $BASEDIR/oncotator.sh $SCRIPT_PATH
chmod 770 $SCRIPT_PATH
 
sed -i -e "s/#javaVersion/$JAVA_VERSION/" $SCRIPT_PATH
sed -i -e "s/#gatkVersion/$GATK_VERSION/" $SCRIPT_PATH
sed -i -e "s/#oncotatorVersion/$ONCOTATOR_VERSION/" $SCRIPT_PATH
sed -i -e "s/#pythonVersion/$PYTHON_VERSION/" $SCRIPT_PATH
sed -i -e "s/#samtoolsVersion/$SAMTOOLS_VERSION/" $SCRIPT_PATH
sed -i -e "s/#tabixVersion/$TABIX_VERSION/" $SCRIPT_PATH
sed -i -e "s/#rVersion/$R_VERSION/" $SCRIPT_PATH

sed -i -e "s/#referenceFasta/${REFERENCE_FASTA//\//\\/}/" $SCRIPT_PATH
sed -i -e "s/#resultsDir/${RESULTS_DIR//\//\\/}/" $SCRIPT_PATH
sed -i -e "s/#project/${PROJECT}/" $SCRIPT_PATH
sed -i -e "s/#oncotatorDB/${ONCOTATOR_DB//\//\\/}/" $SCRIPT_PATH
sed -i -e "s/#transcriptList/${TRANSCRIPT_LIST//\//\\/}/" $SCRIPT_PATH

MULTISAMPLE_VCF=`echo $MULTISAMPLE_VCF | perl -pe "s/\//forwardSlash/g"`
sed -i -e "s/#multisampleVCF/${MULTISAMPLE_VCF//\//\\/}/" $SCRIPT_PATH
perl -i -pe "s/forwardSlash/\//g" $SCRIPT_PATH

LOG_PATH=`echo $SCRIPT_PATH | perl -pe 's/\.sh/\.log/g'`
echo "`$NOW`$SCRIPT_PATH"

JOB_ID=`qsub -o $LOG_PATH -W depend=$MERGE_DEPENDENCY $SCRIPT_PATH` 
echo "`$NOW`job ID: $JOB_ID" 

echo "`$NOW`"		
echo "`$NOW`running script to find genes with multipe LOF & nonsyn mutations across all patients"
 
SCRIPT_PATH=$ANALYSIS_DIR/run/MP_$PROJECT.sh
cp $BASEDIR/filter_multiples.sh $SCRIPT_PATH
chmod 770 $SCRIPT_PATH    

sed -i -e "s/#resultsDir/${RESULTS_DIR//\//\\/}/" $SCRIPT_PATH
sed -i -e "s/#project/${PROJECT//\//\\/}/" $SCRIPT_PATH

LOG_PATH=`echo $SCRIPT_PATH | perl -pe 's/\.sh/\.log/g'`
echo "`$NOW`$SCRIPT_PATH"

JOB_ID=`qsub -o $LOG_PATH -W depend=afterany:$JOB_ID $SCRIPT_PATH` 
echo "`$NOW`job ID: $JOB_ID" 

echo "`$NOW`"		
echo "`$NOW`running summary script"

SCRIPT_PATH=$ANALYSIS_DIR/run/SM_$PROJECT.sh
cp $BASEDIR/summary_oncotator.pl $SCRIPT_PATH
chmod 770 $SCRIPT_PATH    

#create deployment directory for summary
SUMMARY_DEPLOYMENT=$DEPLOYMENT_BASE_DIR/project/$PROJECT/oncotator/$TODAY
ssh $DEPLOYMENT_SERVER "mkdir -p -m 775 $SUMMARY_DEPLOYMENT" > /dev/null 2>&1

sed -i -e "s/#analysisDir/${ANALYSIS_DIR//\//\\/}/" $SCRIPT_PATH
sed -i -e "s/#resultsDir/${RESULTS_DIR//\//\\/}/" $SCRIPT_PATH
sed -i -e "s/#deploymentServer/${DEPLOYMENT_SERVER//\//\\/}/" $SCRIPT_PATH
sed -i -e "s/#summaryDeployment/${SUMMARY_DEPLOYMENT//\//\\/}/" $SCRIPT_PATH

LOG_PATH=`echo $SCRIPT_PATH | perl -pe 's/\.sh/\.log/g'`
echo "`$NOW`$SCRIPT_PATH"

JOB_ID=`qsub -M cgi@imperial.ac.uk -m ea -j oe -q $QUEUE -W depend=afterany:$JOB_ID -o $LOG_PATH $SCRIPT_PATH`  
echo "`$NOW`job ID: $JOB_ID" 
