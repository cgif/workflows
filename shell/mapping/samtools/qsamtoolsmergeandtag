#!/bin/bash

#
# creates and submits scripts to run samtools merge
# on one or more sets of BAM files, mark duplicates
# and collect metrics on the merged BAM file
#

#CONFIGURATION
##############

GROUPVOL_TGU=/project/tgu
BASEDIR="$( cd "$( dirname "$0" )" && pwd )"
DEPLOYMENT_SERVER=eliot.med.ic.ac.uk
DEPLOYMENT_BASE_DIR=/www/html/report

USAGE="$BASEDIR/qsamtoolsmergeandtag.usage"

JAVA_VERSION=jdk-7u25
PICARD_VERSION=1.85
SAMTOOLS_VERSION=1.2
R_VERSION=2.15
GATK_VERSION=3.2-2
BEDTOOLS_VERSION=2.13.3

#now
NOW="date +%Y-%m-%d%t%T%t"

#today
TODAY=`date +%Y-%m-%d`
#TODAY=2015-09-12

QUEUE=pqcgi

#default parameters
SPECIES=hsapiens
ASSEMBLY=GRCh37
METRIC=NONE
MARK_DUPLICATES=TRUE
METRIC_LEVEL=S
SAMPLE_STATUS=none
MAKE_BW=TRUE
PATH_NON_OVERLAPPING_INTERVALS=none

#COMMAND LINE ARGS
##################

#parse command line args
while getopts "i:n:s:a:r:d:s:m:b:t:l:q:c:wh" option; do
    case "$option" in
	
	i) PATH_INPUT_DIR="$OPTARG";;
	n) PROJECT_NAME="$OPTARG";;
	s) SPECIES="$OPTARG";;
	a) ASSEMBLY="$OPTARG";;
	r) PATH_READ_GROUP_INFO="$OPTARG";;
	d) MARK_DUPLICATES="$OPTARG";;
#	s) PATH_HEADER="$OPTARG";;
	m) METRIC="$OPTARG";;
	b) PATH_BAIT_AMPLICON_INTERVALS="$OPTARG";;
	t) PATH_TARGET_INTERVALS="$OPTARG";;
	l) PATH_NON_OVERLAPPING_INTERVALS="$OPTARG";;
	q) METRIC_LEVEL="$OPTARG";;
	c) SAMPLE_STATUS="$OPTARG";;
	w) MAKE_BW=TRUE;;
	h) cat $USAGE; exit 0;;
	[?]) cat $USAGE; exit 1;;

esac
done



if [ -n $SPECIES ] && [ -n $ASSEMBLY ]
then

	if [ ! -d /project/tgu/resources/reference/$SPECIES ]
	then
		echo "Reference for $SPECIES does not exist in /project/tgu/resources/reference."
		echo "Create reference and try again."
		exit 1
	fi

	if [ ! -d /project/tgu/resources/reference/$SPECIES ]
	then
		echo "Assembly $ASSEMBLY does not exist for $SPECIES in /project/tgu/resources/reference/$SPECIES."
		echo "Create reference and try again."
		exit 1
	fi

	PATH_RIBOSOMAL_RNA_INTERVALS=$GROUPVOL_TGU/resources/reference/$SPECIES/$ASSEMBLY/annotation/$ASSEMBLY.rrna.intList
	PATH_ANNOTATION_REFFLAT=$GROUPVOL_TGU/resources/reference/$SPECIES/$ASSEMBLY/annotation/$ASSEMBLY.transcripts.refFlat
	PATH_REFERENCE_FASTA=$GROUPVOL_TGU/resources/reference/$SPECIES/$ASSEMBLY/fasta/$ASSEMBLY.fa

fi



# check for presence of required input parameters
if [ -z $PATH_INPUT_DIR ] || \
   [ -z $PATH_READ_GROUP_INFO ]
   then
        echo "Error: Required input argument missing."
        cat $USAGE
        exit 1
fi

#check if input directory and read group info file exists
if [[ ! -d $PATH_INPUT_DIR ]]
then
        echo "`$NOW`ERROR: input path does not exist or is not a directory: $PATH_INPUT_DIR"
        exit 1
fi

if [[ ! -f $PATH_READ_GROUP_INFO ]]
then
        echo "`$NOW`ERROR: read group info file does not exist: $PATH_READ_GROUP_INFO"
        exit 1
fi

REFERENCE_NAME=`basename $PATH_REFERENCE_FASTA .gz`
REFERENCE_NAME=`basename $REFERENCE_NAME .fa`

#reference dictionary path
PATH_REFERENCE_PARENTDIR=`dirname $PATH_REFERENCE_FASTA`
PATH_REFERENCE_PARENTDIR=`dirname $PATH_REFERENCE_PARENTDIR`
PATH_REFERENCE_DICT=$PATH_REFERENCE_PARENTDIR/dict/$REFERENCE_NAME.dict

#UCSC assembly ID
UCSC_ASSEMBLY_ID_PATH=$PATH_REFERENCE_PARENTDIR/fasta/$REFERENCE_NAME.ucsc
UCSC_ASSEMBLY_ID=`head -n1 $UCSC_ASSEMBLY_ID_PATH`

UCSC_ORGANISM_NAME=`tail -n +2 $UCSC_ASSEMBLY_ID_PATH`

#check if SAM header variable set if not
#set it to sequence dictionary
if [[ -z "$PATH_HEADER" ]]
then
PATH_HEADER=$PATH_REFERENCE_DICT
fi

if [ "$MARK_DUPLICATES" != "TRUE" ] && \
   [ "$MARK_DUPLICATES" != "FALSE" ]
   then
	echo "Error: Invalid value for mark duplicates (-d) option."
	cat $USAGE
	exit 1
fi

RG_LEVEL=`echo $METRIC_LEVEL | grep RG`
L_LEVEL=`echo $METRIC_LEVEL | grep L`
S_LEVEL=`echo $METRIC_LEVEL | grep S`
if  [ -z $RG_LEVEL ] && \
    [ -z $L_LEVEL ] && \
    [ -z $S_LEVEL ] 
    then
	echo "Error: Invalid value for metric level (-q) option."
	cat $USAGE
	exit 1
fi

# if specified check for valid METRIC option
if [ "$METRIC" != "NONE" ]
    then
    if  [ "$METRIC" != "HS" ] && \
        [ "$METRIC" != "TP" ] && \
        [ "$METRIC" != "RS" ]  
	then
	    echo "Error: Invalid value for metrics (-m) option."
	    cat $USAGE
	    exit 1
    fi
fi

# check that sample status is provided if amplicon sequencing
if [[ $METRIC == "TP" ]]; then
	if [[ "$SAMPLE_STATUS" == "none" ]]; then
		echo "ERROR: sample status is not provided for amplicon sequencing"
		exit 1;
	elif [[ ! -f $SAMPLE_STATUS ]]; then
		echo "ERROR: sample status file for amplicon sequencing does not exist: $SAMPLE_STATUS"
		exit 1;
	fi
fi


echo "`${NOW}`merging BAM files in $PATH_INPUT_DIR..."
echo "`${NOW}`using read group info: $PATH_READ_GROUP_INFO"
#echo "`${NOW}`using header         : $PATH_HEADER"


if [[ "$METRIC" != "NONE" ]]; then
	if [[ "$METRIC" == "HS" ]]; then
		if [[ ! -f $PATH_BAIT_AMPLICON_INTERVALS ]] || [[ ! -f $PATH_TARGET_INTERVALS ]]; then
	    	echo "`${NOW}`bait coordinates file or target coordinates file is missing"
	    	exit 1
		fi
		echo "`${NOW}`generating Hybrid Sequencing metrics from merged file"
        echo "`${NOW}`using bait coordinates  : $PATH_BAIT_AMPLICON_INTERVALS"
		echo "`${NOW}`using target coordinates: $PATH_TARGET_INTERVALS"
	elif [[ "$METRIC" == "TP" ]]; then
		if [[ ! -f $PATH_BAIT_AMPLICON_INTERVALS ]] || [[ ! -f $PATH_TARGET_INTERVALS ]]; then
			echo "`${NOW}`bait coordinates file or target coordinates file is missing"
		exit 1
		fi
		if [[ ! -f $PATH_NON_OVERLAPPING_INTERVALS ]] && [[ "$PATH_NON_OVERLAPPING_INTERVALS" != "none" ]]; then
			echo "`${NOW}`non-overlapping intervals file is missing and is not set to none"
			exit 1
		fi
		echo "`${NOW}`generating Targeted PCR metrics from merged file"
		echo "`${NOW}`using amplicon coordinates: $PATH_BAIT_AMPLICON_INTERVALS"
		echo "`${NOW}`using target coordinates  : $PATH_TARGET_INTERVALS"
	
	echo "`${NOW}`generating RNA-seq metrics from merged file"
		echo "`${NOW}`using ribosomal RNA coordinates: $PATH_RIBOSOMAL_RNA_INTERVALS"
		echo "`${NOW}`using annotation refFlat file: $PATH_ANNOTATION_REFFLAT"
	fi
fi

#parse project name from input directory
#PROJECT=`echo $PATH_INPUT_DIR | perl -e 'while(<>){ chop(); @tokens=split(/\//); $retval=@tokens[@tokens-2]; print $retval;  }'`
PROJECT=$PROJECT_NAME
PATH_OUT_DIR_PREFIX=$GROUPVOL_TGU/results/$PROJECT/mergetag
mkdir -p $PATH_OUT_DIR_PREFIX
chmod 770 $PATH_OUT_DIR_PREFIX

mkdir -p $PATH_OUT_DIR_PREFIX/$TODAY
chmod 770 $PATH_OUT_DIR_PREFIX/$TODAY

SUMMARY_RESULTS=$PATH_OUT_DIR_PREFIX/$TODAY/multisample
mkdir -p $SUMMARY_RESULTS
chmod 770 $SUMMARY_RESULTS

PATH_RUN_DIR_PREFIX=$GROUPVOL_TGU/runs/$PROJECT/mergetag	
mkdir -p $PATH_RUN_DIR_PREFIX
chmod 770 $PATH_RUN_DIR_PREFIX

mkdir -p $PATH_RUN_DIR_PREFIX/$TODAY
chmod 770 $PATH_RUN_DIR_PREFIX/$TODAY

mkdir -p $PATH_RUN_DIR_PREFIX/$TODAY/multisample
chmod 770 $PATH_RUN_DIR_PREFIX/$TODAY/multisample

PATH_ANALYSIS_DIR_PREFIX=$GROUPVOL_TGU/analysis/$PROJECT/mergetag	
mkdir -p $PATH_ANALYSIS_DIR_PREFIX
chmod 770 $PATH_ANALYSIS_DIR_PREFIX

mkdir -p $PATH_ANALYSIS_DIR_PREFIX/$TODAY
chmod 770 $PATH_ANALYSIS_DIR_PREFIX/$TODAY

mkdir -p $PATH_ANALYSIS_DIR_PREFIX/$TODAY/multisample
chmod 770 $PATH_ANALYSIS_DIR_PREFIX/$TODAY/multisample
    
SUMMARY_DEPLOYMENT=$DEPLOYMENT_BASE_DIR/project/$PROJECT/mergetag/$TODAY
ssh $DEPLOYMENT_SERVER "mkdir -p $SUMMARY_DEPLOYMENT" > /dev/null 2>&1
ssh $DEPLOYMENT_SERVER "chmod  775 $DEPLOYMENT_BASE_DIR/project/$PROJECT/mergetag" > /dev/null 2>&1
ssh $DEPLOYMENT_SERVER "chmod  775 $DEPLOYMENT_BASE_DIR/project/$PROJECT/mergetag/$TODAY" > /dev/null 2>&1

scp -r ${BASEDIR}/../../resources/images/error.png $DEPLOYMENT_SERVER:$SUMMARY_DEPLOYMENT/ > /dev/null 2>&1
scp -r ${BASEDIR}/../../resources/images/warning.png $DEPLOYMENT_SERVER:$SUMMARY_DEPLOYMENT/ > /dev/null 2>&1
scp -r ${BASEDIR}/../../resources/images/tick.png $DEPLOYMENT_SERVER:$SUMMARY_DEPLOYMENT/ > /dev/null 2>&1
ssh $DEPLOYMENT_SERVER "chmod -R 664 $SUMMARY_DEPLOYMENT/*png" > /dev/null 2>&1

echo "`$NOW`creating and submitting merging jobs for samples in read group info file:"

METRIC_MERGING_DEPENDECIES="afterany"

# for each sample in the read group info file
# (skips header line, extracts 2nd column, removes empty lines and outputs
# set of unique sample names)
for SAMPLE in `sed 1d $PATH_READ_GROUP_INFO | cut -f2 | grep -vP "^$" | sort | uniq`
do

	#create output dir path
	PATH_OUT_DIR=$PATH_OUT_DIR_PREFIX/$TODAY/$SAMPLE
	PATH_RUN_DIR=$PATH_RUN_DIR_PREFIX/$TODAY/$SAMPLE
	PATH_ANALYSIS_DIR=$PATH_ANALYSIS_DIR_PREFIX/$TODAY/$SAMPLE
	PATH_CLIPREADS_DIR=$PATH_ANALYSIS_DIR/clipReads
	
	mkdir -p $PATH_OUT_DIR
	mkdir -p $PATH_RUN_DIR
	mkdir -p $PATH_ANALYSIS_DIR
	mkdir -p $PATH_CLIPREADS_DIR

	chmod 770 $PATH_OUT_DIR
	chmod 770 $PATH_RUN_DIR
	chmod 770 $PATH_ANALYSIS_DIR
	chmod 770 $PATH_CLIPREADS_DIR

	#create readgroup-to-Bam mapping file
	PATH_FILE2RG=$PATH_RUN_DIR/$SAMPLE.file2RG.tsv		
	echo -n "" > $PATH_FILE2RG
	chmod 660 $PATH_FILE2RG

	#create RG-tag file
	PATH_RG_TAGS=$PATH_RUN_DIR/$SAMPLE.RGtags.tsv		
	echo -n "" > $PATH_RG_TAGS
	chmod 660 $PATH_RG_TAGS

	#create file with clipping info
	PATH_CLIP_READS=$PATH_RUN_DIR/$SAMPLE.clipReads.tsv		
	echo -n "" > $PATH_CLIP_READS
	chmod 660 $PATH_CLIP_READS

	PATH_CLIP_JOBS=$PATH_RUN_DIR/$SAMPLE.clipJobs.tsv		
	echo -n "" > $PATH_CLIP_JOBS
	chmod 660 $PATH_CLIP_JOBS

	echo "`$NOW`###########################################################################################"
	echo "`$NOW`sample $SAMPLE"
	echo "`$NOW`###########################################################################################"
	sed 1d $PATH_READ_GROUP_INFO | grep -P "\t$SAMPLE\t" | \
	while read READ_GROUP_RECORD 
        do
		
		RG=`echo "$READ_GROUP_RECORD" | perl -e '$_=<>; @cols=split(/\t/, $_); print $cols[0];'`
		LIB=`echo "$READ_GROUP_RECORD" | perl -e '$_=<>; @cols=split(/\t/, $_); print $cols[2];'`
		MAP_DATE=`echo "$READ_GROUP_RECORD" | perl -e '$_=<>; @cols=split(/\t/, $_); print $cols[9];'`

		#add read group to readgroup-to-Bam mapping file
		BAM_INPUT=`ls $PATH_INPUT_DIR/$MAP_DATE/$SAMPLE/$RG*.bam`
#		BAM_INPUT=`ls $PATH_INPUT_DIR/$MAP_DATE/$SAMPLE/$RG*.short.bam`
		BAM_INPUT_NAME=`basename $BAM_INPUT`
		BAM_INPUT_CLIP=$PATH_CLIPREADS_DIR/$BAM_INPUT_NAME

		echo -e "$BAM_INPUT_CLIP\t$RG" >> $PATH_FILE2RG

		echo "$READ_GROUP_RECORD" | perl -e '$_=<>; @cols=split(/\t/, $_); \
                                                     print "\@RG\t"; 
                                                     print "ID:$cols[0]\t";
                                                     print "SM:$cols[1]\t";
                                                     print "LB:$cols[2]\t";
                                                     print "DS:$cols[3]\t";
                                                     print "PI:$cols[4]\t";
                                                     print "CN:$cols[5]\t";
                                                     print "DT:$cols[6]\t";
                                                     print "PL:$cols[7]\t";
                                                     print "PU:$cols[8]\n"' \
                                          >> $PATH_RG_TAGS

	    #submit clipRead job if required; if not just copy bam file to tmp directory
		CLIP_CYCLE=`echo "$READ_GROUP_RECORD" | perl -e '$_=<>; @cols=split(/\t/, $_); print $cols[10];'`
		CLIP_READ=`echo "$READ_GROUP_RECORD" | perl -e '$_=<>; @cols=split(/\t/, $_); print $cols[11];'`

        #get BAM file size
		BAM_SIZE_KB=`du $BAM_INPUT | cut -f1`
		if [ $BAM_SIZE_KB != 0 ]; then
			BAM_SIZE_MB=$(( $BAM_SIZE_KB / 1024 ))
		fi

		echo -e "$BAM_INPUT\t$BAM_SIZE_MB\t$CLIP_CYCLE\t$CLIP_READ" >> $PATH_CLIP_READS

		TMP_SPACE_MB=$(( BAM_SIZE_MB * 14/4 ))

		SCRIPT_PATH=$PATH_RUN_DIR/ClipReads.$SAMPLE.$RG.sh
		cp $BASEDIR/ClipReads.sh $SCRIPT_PATH
		chmod 770 $SCRIPT_PATH

		sed -i -e "s/#gatkVersion/$GATK_VERSION/" $SCRIPT_PATH
		sed -i -e "s/#javaVersion/$JAVA_VERSION/" $SCRIPT_PATH
		sed -i -e "s/#samtoolsVersion/$SAMTOOLS_VERSION/" $SCRIPT_PATH
		sed -i -e "s/#picardVersion/$PICARD_VERSION/" $SCRIPT_PATH
		sed -i -e "s/#tmpSpacemb/$TMP_SPACE_MB/" $SCRIPT_PATH
    	  	
		sed -i -e "s/#inputBam/${BAM_INPUT//\//\\/}/" $SCRIPT_PATH
		sed -i -e "s/#readGroup/${RG//\//\\/}/" $SCRIPT_PATH
		sed -i -e "s/#clipFile/${PATH_CLIP_READS//\//\\/}/" $SCRIPT_PATH
		sed -i -e "s/#RGFile/${PATH_RG_TAGS//\//\\/}/" $SCRIPT_PATH
		sed -i -e "s/#referenceFasta/${PATH_REFERENCE_FASTA//\//\\/}/" $SCRIPT_PATH
		sed -i -e "s/#referenceDict/${PATH_REFERENCE_DICT//\//\\/}/" $SCRIPT_PATH
		sed -i -e "s/#resultsDir/${PATH_CLIPREADS_DIR//\//\\/}/" $SCRIPT_PATH

		LOG_OUTPUT_PATH=`echo $SCRIPT_PATH | perl -pe 's/\.sh/\.log/g'`
		echo -n "" > $LOG_OUTPUT_PATH
		chmod 660 $LOG_OUTPUT_PATH

		echo "`${NOW}`submitting job script $SCRIPT_PATH "
		JOB_ID=`qsub -q pqcgi -o $LOG_OUTPUT_PATH $SCRIPT_PATH`
		echo "`${NOW}`job ID: $JOB_ID"
		echo -e "$JOB_ID" >> $PATH_CLIP_JOBS

	done

	# get total BAM file size
	# (this cannot be done in the above
        # while loop as we pipe into the loop
        # which creates a subshell for which
        # variables are out of scope outside
        # the loop)
	TOTAL_BAM_SIZE_MB=0
	for BAM_SIZE_MB in `cut -f2 $PATH_CLIP_READS`
	do
	
		TOTAL_BAM_SIZE_MB=$(( $TOTAL_BAM_SIZE_MB + $BAM_SIZE_MB ))
		
	done;

	TMP_SPACE_MB=$(( $TOTAL_BAM_SIZE_MB * 10/4 ))

	CLIPPING_DEPENDECIES="afterok"
	for JOB_ID in `cut -f1 $PATH_CLIP_JOBS`
	do

	    CLIPPING_DEPENDECIES="$CLIPPING_DEPENDECIES:$JOB_ID"

	done

	OUT_BAM_NAME=$SAMPLE.bam

	#creating job script from template
	SCRIPT_PATH=$PATH_RUN_DIR/samtoolsMergeAndTag.$SAMPLE.sh
	cp $BASEDIR/samtoolsMergeAndTag.sh $SCRIPT_PATH
	chmod 770 $SCRIPT_PATH

	#configure job script
	sed -i -e "s/queue/$QUEUE/" $SCRIPT_PATH
	sed -i -e "s/tmpSpace/$TMP_SPACE_MB/" $SCRIPT_PATH
	sed -i -e "s/javaVersion/$JAVA_VERSION/" $SCRIPT_PATH
	sed -i -e "s/picardVersion/$PICARD_VERSION/" $SCRIPT_PATH
	sed -i -e "s/samtoolsVersion/$SAMTOOLS_VERSION/" $SCRIPT_PATH
	sed -i -e "s/rVersion/$R_VERSION/" $SCRIPT_PATH
	sed -i -e "s/gatkVersion/$GATK_VERSION/" $SCRIPT_PATH
	sed -i -e "s/bedtoolsVersion/$BEDTOOLS_VERSION/" $SCRIPT_PATH
	sed -i -e "s/readGroupInfo/${PATH_RG_TAGS//\//\\/}/" $SCRIPT_PATH
	sed -i -e "s/markDuplicates/$MARK_DUPLICATES/" $SCRIPT_PATH
	sed -i -e "s/headerFile/${PATH_HEADER//\//\\/}/" $SCRIPT_PATH
	sed -i -e "s/file2RgMapping/${PATH_FILE2RG//\//\\/}/" $SCRIPT_PATH
	sed -i -e "s/pathOutputDir/${PATH_OUT_DIR//\//\\/}/" $SCRIPT_PATH
	sed -i -e "s/outBamName/$OUT_BAM_NAME/" $SCRIPT_PATH
	sed -i -e "s/baitIntervalsFile/${PATH_BAIT_AMPLICON_INTERVALS//\//\\/}/" $SCRIPT_PATH
	sed -i -e "s/targetIntervalsFile/${PATH_TARGET_INTERVALS//\//\\/}/" $SCRIPT_PATH
	sed -i -e "s/nonOvelappingIntervalsFile/${PATH_NON_OVERLAPPING_INTERVALS//\//\\/}/" $SCRIPT_PATH
	sed -i -e "s/ribosomalRnaIntervalsFile/${PATH_RIBOSOMAL_RNA_INTERVALS//\//\\/}/" $SCRIPT_PATH
	sed -i -e "s/annotationRefFlat/${PATH_ANNOTATION_REFFLAT//\//\\/}/" $SCRIPT_PATH
	sed -i -e "s/referenceSequence/${PATH_REFERENCE_FASTA//\//\\/}/" $SCRIPT_PATH
	sed -i -e "s/referenceDict/${PATH_REFERENCE_DICT//\//\\/}/" $SCRIPT_PATH
	sed -i -e "s/calculateMetric/$METRIC/" $SCRIPT_PATH
	sed -i -e "s/metricLevel/$METRIC_LEVEL/" $SCRIPT_PATH
	sed -i -e "s/makeBw/$MAKE_BW/" $SCRIPT_PATH
	sed -i -e "s/ucscAssemblyID/$UCSC_ASSEMBLY_ID/" $SCRIPT_PATH
    sed -i -e "s/ucscOrganismName/$UCSC_ORGANISM_NAME/" $SCRIPT_PATH

	LOG_OUTPUT_PATH=`echo $SCRIPT_PATH | perl -pe 's/\.sh$/\.log/g'`
	echo -n "" > $LOG_OUTPUT_PATH
	chmod 660 $LOG_OUTPUT_PATH

	echo "`${NOW}`submitting job script $SCRIPT_PATH "
	JOB_ID=`qsub -q $QUEUE -o $LOG_OUTPUT_PATH -W depend=$CLIPPING_DEPENDECIES $SCRIPT_PATH`
	echo "`${NOW}`job ID: $JOB_ID"
	
	METRIC_MERGING_DEPENDECIES="$METRIC_MERGING_DEPENDECIES:$JOB_ID"

	if [[ "$METRIC" != "TP" ]]
	then

        	#print progress summary for submitted jobs
        	#if job is completed and log file is created in the run directory
        	#script examines whether the output files are in place and not empty
 
        	SCRIPT_PATH=$PATH_RUN_DIR/summary_mergeandtag.$SAMPLE.pl
        	cp $BASEDIR/summary_mergeandtag.pl $SCRIPT_PATH
		chmod 770 $SCRIPT_PATH

        	sed -i -e "s/projectDirAnalysis/${PATH_RUN_DIR_PREFIX//\//\\/}/" $SCRIPT_PATH
        	sed -i -e "s/projectDirResults/${PATH_OUT_DIR_PREFIX//\//\\/}/" $SCRIPT_PATH
        	sed -i -e "s/Today/$TODAY/" $SCRIPT_PATH
		sed -i -e "s/Project/$PROJECT/" $SCRIPT_PATH
        	sed -i -e "s/deploymentServer/$DEPLOYMENT_SERVER/" $SCRIPT_PATH
        	sed -i -e "s/summaryDeployment/${SUMMARY_DEPLOYMENT//\//\\/}/" $SCRIPT_PATH
        	sed -i -e "s/summaryResults/${SUMMARY_RESULTS//\//\\/}/" $SCRIPT_PATH
        	sed -i -e "s/sampleList/${PATH_READ_GROUP_INFO//\//\\/}/" $SCRIPT_PATH
        	sed -i -e "s/markDuplicates/$MARK_DUPLICATES/" $SCRIPT_PATH
		sed -i -e "s/metricLevel/$METRIC_LEVEL/" $SCRIPT_PATH
		sed -i -e "s/collectMetric/$METRIC/" $SCRIPT_PATH
		sed -i -e "s/ucscAssemblyID/$UCSC_ASSEMBLY_ID/" $SCRIPT_PATH
		sed -i -e "s/ucscOrganismName/$UCSC_ORGANISM_NAME/" $SCRIPT_PATH

        	LOG_OUTPUT_PATH=`echo $SCRIPT_PATH | perl -pe 's/\.pl/\.log/g'`
		echo -n "" > $LOG_OUTPUT_PATH
		chmod 660 $LOG_OUTPUT_PATH

		echo "`${NOW}`submitting summary script $SCRIPT_PATH "
        	SUM_JOB_ID=`qsub -q $QUEUE -o $LOG_OUTPUT_PATH -j oe -W depend=afterany:$JOB_ID -M igf@imperial.ac.uk $SCRIPT_PATH` 
		echo "`$NOW`job ID: $SUM_JOB_ID"

		METRIC_MERGING_DEPENDECIES="$METRIC_MERGING_DEPENDECIES:$SUM_JOB_ID"

	fi

done;

echo "`$NOW`###########################################################################################"
#submit metric merging job
if [[ "$METRIC" == "TP" ]]
then
		
	SCRIPT_PATH=$PATH_RUN_DIR_PREFIX/$TODAY/multisample/mergePicardTargetedPcrMetrics.sh
	cp $BASEDIR/mergePicardTargetedPcrMetrics.sh $SCRIPT_PATH
	chmod 770 $SCRIPT_PATH

	CUSTOM_AMPLICON_SET=`basename $PATH_BAIT_AMPLICON_INTERVALS`

	if [[ "$PATH_NON_OVERLAPPING_INTERVALS" != "none" ]]; then
		NON_OVERLAPPING_INTERVALS=TRUE
	else 
		NON_OVERLAPPING_INTERVALS=FALSE
	fi

	SCRIPT_DIR=$PATH_RUN_DIR_PREFIX/$TODAY/multisample

	#configure job script
	sed -i -e "s/mergeTagProjectDirectory/${PATH_OUT_DIR_PREFIX//\//\\/}/" $SCRIPT_PATH
	sed -i -e "s/#runFolder/${SCRIPT_DIR//\//\\/}/" $SCRIPT_PATH
	sed -i -e "s/mergeTagDate/$TODAY/" $SCRIPT_PATH
	sed -i -e "s/mergeTagProjectName/$PROJECT/" $SCRIPT_PATH
	sed -i -e "s/customAmpliconSet/$CUSTOM_AMPLICON_SET/" $SCRIPT_PATH
	sed -i -e "s/#nonOverlapping/$NON_OVERLAPPING_INTERVALS/" $SCRIPT_PATH


	#create R script to plot interval coverage
	OUTPUT_DIR=$PATH_OUT_DIR_PREFIX/$TODAY/multisample
	SAMPLE_INTERVAL_SUMMARY=$PROJECT.$TODAY.sample_interval_summary
	SAMPLE_NON_OVERLAPPING_INTERVAL_SUMMARY=$PROJECT.$TODAY.non_overlapping.sample_interval_summary
		
	R_SCRIPT_PATH=$SCRIPT_DIR/plot_amplicon_summary_metrics.R
	
	cp $BASEDIR/plot_amplicon_summary_metrics.R $R_SCRIPT_PATH
	
 	sed -i -e "s/#resultsDir/${OUTPUT_DIR//\//\\/}/" $R_SCRIPT_PATH	
 	sed -i -e "s/#sampleIntervalSummary/$SAMPLE_INTERVAL_SUMMARY/" $R_SCRIPT_PATH
 	sed -i -e "s/#nonOverlappingIntervalSummary/$SAMPLE_NON_OVERLAPPING_INTERVAL_SUMMARY/" $R_SCRIPT_PATH
 	sed -i -e "s/#projectName/$PROJECT/" $R_SCRIPT_PATH
 	sed -i -e "s/#mergetagDate/$TODAY/" $R_SCRIPT_PATH
 	sed -i -e "s/#sampleStatus/${SAMPLE_STATUS//\//\\/}/" $R_SCRIPT_PATH


	# plot non-overlapping regions coverage if using non-overlapping regions
#	if [[ "$PATH_NON_OVERLAPPING_INTERVALS" != "none" ]]; then

#		SAMPLE_INTERVAL_SUMMARY=$PROJECT.$TODAY.non_overlapping.sample_interval_summary
#		R_SCRIPT_PATH=$SCRIPT_DIR/plot_amplicon_summary_metrics.non_overlapping.R

#		cp $BASEDIR/plot_non_overlapping_amplicon_summary_metrics.R $R_SCRIPT_PATH
	
 #		sed -i -e "s/#resultsDir/${OUTPUT_DIR//\//\\/}/" $R_SCRIPT_PATH	
# 		sed -i -e "s/#sampleIntervalSummary/$SAMPLE_INTERVAL_SUMMARY/" $R_SCRIPT_PATH

#	fi


	#create R script to plot PCR metrics
	PCR_METRICS_SUMMARY=$PATH_OUT_DIR_PREFIX/$TODAY/multisample/$PROJECT.$TODAY.targetedPcrMetrics
		
	R_SCRIPT_PATH=$SCRIPT_DIR/plot_PCR_metrics.R
	
	cp $BASEDIR/plot_PCRorHS_metrics.R $R_SCRIPT_PATH
	
 	sed -i -e "s/#metricsSummary/${PCR_METRICS_SUMMARY//\//\\/}/" $R_SCRIPT_PATH	
 	sed -i -e "s/#experimentType/$METRIC/" $R_SCRIPT_PATH

	
	LOG_OUTPUT_PATH=`echo $SCRIPT_PATH | perl -pe 's/\.sh$/\.log/g'`
	echo -n "" > $LOG_OUTPUT_PATH
	chmod 660 $LOG_OUTPUT_PATH

	echo "`${NOW}`submitting job script to merge targeted PCR metrics: $SCRIPT_PATH "
	JOB_ID=`qsub -W depend=$METRIC_MERGING_DEPENDECIES -q $QUEUE -o $LOG_OUTPUT_PATH $SCRIPT_PATH`

	echo "`$NOW`job ID: $JOB_ID"
	METRIC_MERGING_DEPENDECIES="$METRIC_MERGING_DEPENDECIES:$JOB_ID"

	OUTPUT_FILE=$PROJECT.$TODAY.targetedPcrMetrics
	HTML_PATH=$PATH_RUN_DIR_PREFIX/$TODAY/multisample/$OUTPUT_FILE.php
	cp $BASEDIR/../../helper/tsvToHtmlTable.php $HTML_PATH
	sed -i -e "s/#header/Targeted PCR Metrics/" $HTML_PATH
	sed -i -e "s/#tsvFile/${OUTPUT_FILE//\//\\/}/" $HTML_PATH
	cat $BASEDIR/picardTargetPcrMetricsColumnDescriptions.txt >> $HTML_PATH

	OUTPUT_FILE=$PROJECT.$TODAY.perTargetCoverage
	HTML_PATH=$PATH_RUN_DIR_PREFIX/$TODAY/multisample/$OUTPUT_FILE.php
	cp $BASEDIR/../../helper/tsvToHtmlTable.php $HTML_PATH
	sed -i -e "s/#header/Target coverage Picard/" $HTML_PATH
	sed -i -e "s/#tsvFile/${OUTPUT_FILE//\//\\/}/" $HTML_PATH

	if [[ "$PATH_NON_OVERLAPPING_INTERVALS" != "none" ]]; then
		OUTPUT_FILE=$PROJECT.$TODAY.non_overlapping.perTargetCoverage
        HTML_PATH=$PATH_RUN_DIR_PREFIX/$TODAY/multisample/$OUTPUT_FILE.php
        cp $BASEDIR/../../helper/tsvToHtmlTable.php $HTML_PATH
        sed -i -e "s/#header/Target coverage non-overlapping amplicon regions Picard/" $HTML_PATH
        sed -i -e "s/#tsvFile/${OUTPUT_FILE//\//\\/}/" $HTML_PATH
	fi

	OUTPUT_FILE=$PROJECT.$TODAY.sample_interval_summary
	HTML_PATH=$PATH_RUN_DIR_PREFIX/$TODAY/multisample/$OUTPUT_FILE.php
	cp $BASEDIR/../../helper/tsvToHtmlTable.php $HTML_PATH
	sed -i -e "s/#header/Target coverage from GATK DepthOfCoverage/" $HTML_PATH
	sed -i -e "s/#tsvFile/${OUTPUT_FILE//\//\\/}/" $HTML_PATH

	if [[ "$PATH_NON_OVERLAPPING_INTERVALS" != "none" ]]; then
		OUTPUT_FILE=$PROJECT.$TODAY.non_overlapping.sample_interval_summary
        HTML_PATH=$PATH_RUN_DIR_PREFIX/$TODAY/multisample/$OUTPUT_FILE.php
        cp $BASEDIR/../../helper/tsvToHtmlTable.php $HTML_PATH
        sed -i -e "s/#header/Target coverage non-overlapping amplicon regions from GATK DepthOfCoverage/" $HTML_PATH
        sed -i -e "s/#tsvFile/${OUTPUT_FILE//\//\\/}/" $HTML_PATH
	fi


elif [ "$METRIC" == "HS" ]
then
	
	SCRIPT_PATH=$PATH_RUN_DIR_PREFIX/$TODAY/multisample/mergePicardHybridSequencingMetrics.sh
	cp $BASEDIR/mergePicardHybridSequencingMetrics.sh $SCRIPT_PATH
	chmod 770 $SCRIPT_PATH

	CUSTOM_AMPLICON_SET=`basename $PATH_BAIT_AMPLICON_INTERVALS`
	SCRIPT_DIR=$PATH_RUN_DIR_PREFIX/$TODAY/multisample

	#configure job script
	sed -i -e "s/mergeTagProjectDirectory/${PATH_OUT_DIR_PREFIX//\//\\/}/" $SCRIPT_PATH
	sed -i -e "s/#runFolder/${SCRIPT_DIR//\//\\/}/" $SCRIPT_PATH
	sed -i -e "s/mergeTagDate/$TODAY/" $SCRIPT_PATH
	sed -i -e "s/mergeTagProjectName/$PROJECT/" $SCRIPT_PATH
	sed -i -e "s/customAmpliconSet/$CUSTOM_AMPLICON_SET/" $SCRIPT_PATH
	sed -i -e "s/#Rversion/$R_VERSION/" $SCRIPT_PATH

	#create R script to plot HS metrics
	HS_METRICS_SUMMARY=$PATH_OUT_DIR_PREFIX/$TODAY/multisample/$PROJECT.$TODAY.hybridMetrics
		
	R_SCRIPT_PATH=$PATH_RUN_DIR_PREFIX/$TODAY/multisample/plot_HS_metrics.R
	
	cp $BASEDIR/plot_PCRorHS_metrics.R $R_SCRIPT_PATH
	
 	sed -i -e "s/#metricsSummary/${HS_METRICS_SUMMARY//\//\\/}/" $R_SCRIPT_PATH	
 	sed -i -e "s/#experimentType/$METRIC/" $R_SCRIPT_PATH
 	sed -i -e "s/#markDuplicates/$MARK_DUPLICATES/" $R_SCRIPT_PATH
	
	LOG_OUTPUT_PATH=`echo $SCRIPT_PATH | perl -pe 's/\.sh$/\.log/g'`
	echo -n "" > $LOG_OUTPUT_PATH
	chmod 660 $LOG_OUTPUT_PATH

	echo "`${NOW}`submitting job script to merge hybrid sequencing metrics: $SCRIPT_PATH "
	JOB_ID=`qsub -W depend=$METRIC_MERGING_DEPENDECIES -q $QUEUE -o $LOG_OUTPUT_PATH $SCRIPT_PATH`
	echo "`$NOW`job ID: $JOB_ID"
	METRIC_MERGING_DEPENDECIES="$METRIC_MERGING_DEPENDECIES:$JOB_ID"

	OUTPUT_FILE=$PROJECT.$TODAY.hybridMetrics
        HTML_PATH=$PATH_RUN_DIR_PREFIX/$TODAY/multisample/$OUTPUT_FILE.php
        cp $BASEDIR/../../helper/tsvToHtmlTable.php $HTML_PATH
        sed -i -e "s/#header/Hybrid Sequencing Metrics/" $HTML_PATH
        sed -i -e "s/#tsvFile/${OUTPUT_FILE//\//\\/}/" $HTML_PATH
	cat $BASEDIR/picardHybridSequencingMetricsColumnDescriptions.txt >> $HTML_PATH

	OUTPUT_FILE=$PROJECT.$TODAY.perTargetCoverage
        HTML_PATH=$PATH_RUN_DIR_PREFIX/$TODAY/multisample/$OUTPUT_FILE.php
        cp $BASEDIR/../../helper/tsvToHtmlTable.php $HTML_PATH
        sed -i -e "s/#header/Target coverage/" $HTML_PATH
        sed -i -e "s/#tsvFile/${OUTPUT_FILE//\//\\/}/" $HTML_PATH

elif [ "$METRIC" == "RS" ]
then

	SCRIPT_PATH=$PATH_RUN_DIR_PREFIX/$TODAY/multisample/mergePicardRnaSeqMetrics.sh
	cp $BASEDIR/mergePicardRnaSeqMetrics.sh $SCRIPT_PATH
	chmod 770 $SCRIPT_PATH

	SCRIPT_DIR=$PATH_RUN_DIR_PREFIX/$TODAY/multisample

	#configure job script
	sed -i -e "s/mergeTagProjectDirectory/${PATH_OUT_DIR_PREFIX//\//\\/}/" $SCRIPT_PATH
	sed -i -e "s/#runFolder/${SCRIPT_DIR//\//\\/}/" $SCRIPT_PATH
	sed -i -e "s/#samtoolsVersion/$SAMTOOLS_VERSION/" $SCRIPT_PATH
	sed -i -e "s/#rVersion/$R_VERSION/" $SCRIPT_PATH
	sed -i -e "s/mergeTagDate/$TODAY/" $SCRIPT_PATH
	sed -i -e "s/mergeTagProjectName/$PROJECT/" $SCRIPT_PATH

	#create R script to plot RS metrics	
	R_SCRIPT_PATH=$PATH_RUN_DIR_PREFIX/$TODAY/multisample/plot_RS_metrics.R
	cp $BASEDIR/plot_RS_metrics.R $R_SCRIPT_PATH

	RS_METRICS_SUMMARY=$PATH_OUT_DIR_PREFIX/$TODAY/multisample/$PROJECT.$TODAY.RnaSeqMetrics
	READ_COUNTS_FILE=$PATH_OUT_DIR_PREFIX/$TODAY/multisample/$PROJECT.$TODAY.readCounts
 	sed -i -e "s/#metricsSummary/${RS_METRICS_SUMMARY//\//\\/}/" $R_SCRIPT_PATH	
 	sed -i -e "s/#countsFile/${READ_COUNTS_FILE//\//\\/}/" $R_SCRIPT_PATH	
 	sed -i -e "s/#refFile/${PATH_REFERENCE_FASTA//\//\\/}/" $R_SCRIPT_PATH	
	
	LOG_OUTPUT_PATH=`echo $SCRIPT_PATH | perl -pe 's/\.sh$/\.log/g'`
	echo -n "" > $LOG_OUTPUT_PATH
	chmod 660 $LOG_OUTPUT_PATH

	echo "`${NOW}`submitting job script to merge RNA-Seq metrics: $SCRIPT_PATH "
	JOB_ID=`qsub -W depend=$METRIC_MERGING_DEPENDECIES -q $QUEUE -o $LOG_OUTPUT_PATH $SCRIPT_PATH`
	echo "`$NOW`job ID: $JOB_ID"
	METRIC_MERGING_DEPENDECIES="$METRIC_MERGING_DEPENDECIES:$JOB_ID"

	OUTPUT_FILE=$PROJECT.$TODAY.RnaSeqMetrics
        HTML_PATH=$PATH_RUN_DIR_PREFIX/$TODAY/multisample/$OUTPUT_FILE.php
        cp $BASEDIR/../../helper/tsvToHtmlTable.php $HTML_PATH
        sed -i -e "s/#header/RNA-Seq Metrics/" $HTML_PATH
        sed -i -e "s/#tsvFile/${OUTPUT_FILE//\//\\/}/" $HTML_PATH
	cat $BASEDIR/picardRnaSeqMetricsColumnDescriptions.txt >> $HTML_PATH

fi

#submit alignment summary metrics merging job
if [ "$S_LEVEL" ]
then

	SCRIPT_PATH=$PATH_RUN_DIR_PREFIX/$TODAY/multisample/mergePicardAlignmentSummaryMetrics.sh
	cp $BASEDIR/mergePicardAlignmentSummaryMetrics.sh $SCRIPT_PATH
	chmod 770 $SCRIPT_PATH

	#configure job script
	sed -i -e "s/mergeTagProjectDirectory/${PATH_OUT_DIR_PREFIX//\//\\/}/" $SCRIPT_PATH
	sed -i -e "s/mergeTagDate/$TODAY/" $SCRIPT_PATH
	sed -i -e "s/mergeTagProjectName/$PROJECT/" $SCRIPT_PATH

	LOG_OUTPUT_PATH=`echo $SCRIPT_PATH | perl -pe 's/\.sh$/\.log/g'`
	echo -n "" > $LOG_OUTPUT_PATH
	chmod 660 $LOG_OUTPUT_PATH

	echo "`${NOW}`submitting job script to merge alignment summary metrics: $SCRIPT_PATH "
	JOB_ID=`qsub -W depend=$METRIC_MERGING_DEPENDECIES -q $QUEUE -o $LOG_OUTPUT_PATH $SCRIPT_PATH`
	echo "`$NOW`job ID: $JOB_ID"
	METRIC_MERGING_DEPENDECIES="$METRIC_MERGING_DEPENDECIES:$JOB_ID"

        #create php script that translate tsv file into html
	for CATEGORY in FIRST_OF_PAIR SECOND_OF_PAIR PAIR UNPAIRED
	do

	    OUTPUT_FILE=$PROJECT.$TODAY.alignment_summary_metrics.$CATEGORY
            HTML_PATH=$PATH_RUN_DIR_PREFIX/$TODAY/multisample/$OUTPUT_FILE.php
            cp $BASEDIR/../../helper/tsvToHtmlTable.php $HTML_PATH
            sed -i -e "s/#header/Alignment Summary Metrics $CATEGORY/" $HTML_PATH
            sed -i -e "s/#tsvFile/${OUTPUT_FILE//\//\\/}/" $HTML_PATH
	    cat $BASEDIR/picardAlignmentSummaryMetricsColumnDescription.txt >> $HTML_PATH

	done

fi


#print progress summary for submitted jobs
#if job is completed and log file is created in the run directory
#script examines whether the output files are in place and not empty

SCRIPT_PATH=$PATH_RUN_DIR_PREFIX/$TODAY/multisample/summary_mergeandtag.pl
cp $BASEDIR/summary_mergeandtag.pl $SCRIPT_PATH
chmod 770 $SCRIPT_PATH

sed -i -e "s/projectDirAnalysis/${PATH_RUN_DIR_PREFIX//\//\\/}/" $SCRIPT_PATH
sed -i -e "s/projectDirResults/${PATH_OUT_DIR_PREFIX//\//\\/}/" $SCRIPT_PATH
sed -i -e "s/Today/$TODAY/" $SCRIPT_PATH
sed -i -e "s/Project/$PROJECT/" $SCRIPT_PATH
sed -i -e "s/deploymentServer/$DEPLOYMENT_SERVER/" $SCRIPT_PATH
sed -i -e "s/summaryDeployment/${SUMMARY_DEPLOYMENT//\//\\/}/" $SCRIPT_PATH
sed -i -e "s/summaryResults/${SUMMARY_RESULTS//\//\\/}/" $SCRIPT_PATH
sed -i -e "s/sampleList/${PATH_READ_GROUP_INFO//\//\\/}/" $SCRIPT_PATH
sed -i -e "s/markDuplicates/$MARK_DUPLICATES/" $SCRIPT_PATH
sed -i -e "s/metricLevel/$METRIC_LEVEL/" $SCRIPT_PATH
sed -i -e "s/collectMetric/$METRIC/" $SCRIPT_PATH
sed -i -e "s/multisample_no/multisample_yes/" $SCRIPT_PATH
sed -i -e "s/makeBW/$MAKE_BW/" $SCRIPT_PATH
sed -i -e "s/ucscAssemblyID/$UCSC_ASSEMBLY_ID/" $SCRIPT_PATH
sed -i -e "s/ucscOrganismName/$UCSC_ORGANISM_NAME/" $SCRIPT_PATH

LOG_OUTPUT_PATH=`echo $SCRIPT_PATH | perl -pe 's/\.pl/\.log/g'`
echo -n "" > $LOG_OUTPUT_PATH
chmod 660 $LOG_OUTPUT_PATH

echo "`$NOW`submitting last summary script: $SCRIPT_PATH"
SUM_JOB_ID=`qsub -q $QUEUE -o $LOG_OUTPUT_PATH -j oe -W depend=$METRIC_MERGING_DEPENDECIES -M igf@imperial.ac.uk $SCRIPT_PATH` 
echo "`$NOW`job ID: $SUM_JOB_ID"
echo "`$NOW`progress and summary can be seen at $DEPLOYMENT_SERVER/report/project/$PROJECT/mergetag/$TODAY"
