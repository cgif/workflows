#!/bin/bash

# sets up directory structure and scripts for getting exon counts from capture data
# and submits jobs to queue

BASEDIR=`dirname $0`
PATH_PLACE_HOLDER=forwardSlash

# now
NOW="date +%Y-%m-%d%t%T%t"

#today
TODAY=`date +%Y-%m-%d`

# script containing R functions
R_FUNCTIONS=$BASEDIR/exomeDepth_target.R

# default is to get exon counts for all exons in hg19 using in-built exon positions.
# for a different targeted data sequencing data, a bed file with the regions should be provided

TARGET=exome


USAGE="USAGE: qgetExonCounts -i <bam_list_file_with_path> -p <project> -t <target_bed_with_path; [hg19.exome]> -o <output_prefix_no_path>"
 
#parse command line args
while getopts "i:p:t:o:" option; do
    case "$option" in
	
	i) BAM_LIST="$OPTARG";;
	p) PROJECT="$OPTARG";;
	t) TARGET="$OPTARG";;
	o) OUTPUT="$OPTARG";;
	[?]) echo "$USAGE";;

esac
done

if [ -z $BAM_LIST ] || \
    [ -z $PROJECT ] || \
    [ -z $TARGET ] || \
    [ -z $OUTPUT ]
    then
    echo $USAGE
    exit 1
fi

# make folders 

ANALYSIS_DIR=/ax3-cgi/analysis/$PROJECT/exomeDepth/exonCounts/$OUTPUT/$TODAY
SCRIPT_DIR=$ANALYSIS_DIR/run
RESULTS_DIR=/ax3-cgi/results/$PROJECT/exomeDepth/exonCounts/$OUTPUT/$TODAY

echo "`$NOW`creating directory structure"
mkdir -m 770 -p $ANALYSIS_DIR
mkdir -m 770 -p $SCRIPT_DIR
mkdir -m 770 -p $RESULTS_DIR

# write R script for calling CNVs

R_SCRIPT=$SCRIPT_DIR/${OUTPUT}_getExonCounts.R

echo "`$NOW`creating R script for $OUTPUT "
echo "target is $TARGET"

if [[ "$TARGET" == "exome" ]]; then
	echo "
source('$R_FUNCTIONS')

bam.files <- '$BAM_LIST'
exon.counts.file <- '$RESULTS_DIR/${OUTPUT}.exon.counts.Rdata'

get.exon.counts.exome(bed.frame = exons.hg19,
					bam.files = bam.files,
					exon.counts.file = exon.counts.file)

" > $R_SCRIPT

else 
	echo "
source('$R_FUNCTIONS')

target.bed <- '$TARGET'
bam.files <- '$BAM_LIST'
exon.counts.file <- '$RESULTS_DIR/${OUTPUT}.exon.counts.Rdata'

get.exon.counts(target.bed = target.bed,
				bam.files = bam.files,
				exon.counts.file = exon.counts.file)

" > $R_SCRIPT
fi

#create job script
echo "`$NOW`creating and submitting job script for $OUTPUT "

SCRIPT_PATH=$SCRIPT_DIR/${OUTPUT}.getExonCounts.sh
cp $BASEDIR/getExonCounts.sh $SCRIPT_PATH

#replace forward slashes in path with place holder as it
#causes problems with Perl inline replacement
#(will be converted back in the target script)
R_SCRIPT=`echo $R_SCRIPT | perl -pe "s/\//$PATH_PLACE_HOLDER/g"`
RESULTS_DIR=`echo $RESULTS_DIR | perl -pe "s/\//$PATH_PLACE_HOLDER/g"`
SCRIPT_DIR=`echo $SCRIPT_DIR | perl -pe "s/\//$PATH_PLACE_HOLDER/g"`

perl -i -pe "s/Rscript/$R_SCRIPT/" $SCRIPT_PATH
perl -i -pe "s/resultsFolder/$RESULTS_DIR/" $SCRIPT_PATH
perl -i -pe "s/scriptFolder/$SCRIPT_DIR/" $SCRIPT_PATH

#convert path place holder back to forward shlash
perl -i -pe "s/$PATH_PLACE_HOLDER/\//g" $SCRIPT_PATH

#submit job 
LOG_OUTPUT_PATH=`echo $SCRIPT_PATH | perl -pe 's/\.sh/\.log/g'`
echo "`$NOW`$SCRIPT_PATH"

qsub -o $LOG_OUTPUT_PATH $SCRIPT_PATH

echo "`$NOW`done"
